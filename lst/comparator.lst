C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE COMPARATOR
OBJECT MODULE PLACED IN .\obj\comparator.obj
COMPILER INVOKED BY: H:\PrgJaz\Keil\C51\BIN\C51.EXE src\comparator.c51 OMF2 BROWSE MODP2 INCDIR(.\src) DEBUG PRINT(.\lst
                    -\comparator.lst) OBJECT(.\obj\comparator.obj)

line level    source

   1          /***********************************************************************
   2          MODULE:    Comparators
   3          VERSION:   1.02
   4          CONTAINS:  Routines for controlling the comparators on the Philips
   5                     P89LPC922
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Nov 13 2007" at "00:10:12" by Code Architect 2.11
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          #include <reg922.h>
  18          #include "comparator.h"
  19          #include "event.h"
  20          #include "event.def"
  21          
  22          bit cmp1_temp;
  23          bit cmp2_temp;
  24          
  25          /***********************************************************************
  26          DESC:    Generates a 13 microsecond delay needed to stabilize a
  27                   comparator output after enabling.
  28                   Note that the datasheet mentions a 10 microsecond delay.
  29                   Because the timer may be clocked from the watchdog timer, which
  30                   can be up to 30% faster than stated, 30% has been added to the
  31                   absolute minimum delay of 10us to give 13us.
  32                   Uses timer 1
  33                   Actual delay: 13.02 us
  34          RETURNS: Nothing
  35          CAUTION: The delay must be an absolute minimum of 10us
  36          ************************************************************************/
  37          void comparators_13usdelay(void)
  38          {
  39   1          // ensure timer 1 stopped
  40   1          TR1 = 0;
  41   1          
  42   1          // configure timer 1 as 16-bit timer
  43   1          TMOD &= 0x0F;
  44   1          TMOD |= 0x10;
  45   1          TAMOD &= 0xEF;
  46   1          
  47   1          // set reload value
  48   1          TH1 = 0xFF;
  49   1          TL1 = 0xD0;
  50   1          
  51   1          // disable timer interrupt
  52   1          ET1 = 0;
  53   1          
  54   1          // run timer and wait for overflow
C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 2   

  55   1          TF1 = 0;
  56   1          TR1 = 1;
  57   1          
  58   1          while (!TF1);
  59   1          
  60   1          // stop timer and clean up
  61   1          TR1 = 0;
  62   1          TF1 = 0;
  63   1      }
  64          
  65          /***********************************************************************
  66          DESC:    Initializes a comparator
  67                   Selects the comparator inputs/reference voltage source, enables
  68                   comparator output, enables comparator, configures I/O pins
  69                   needed, enables interrupts
  70                   If a comparator is being enabled then comparators_13usdelay
  71                   is called to provide a 13us delay to stabilize the comparator
  72          RETURNS: Nothing
  73          CAUTION: Set EA to 1 to enable interrupts after calling
  74          ************************************************************************/
  75          void comparators_init(bit compnum,                    // comparator number:     COMP_1 or COMP_2
  76                                unsigned char posinput,         // positive input A or B: COMP_INPUTA or COMP_INPUTB
  77                                unsigned char neginput,         // negative input CMPREF or internal reference:
  78                                         //                        COMP_INPUTREF, COMP_INTERNALREF
  79                                unsigned char outputenable      // enable or disable output pin:
  80                                            //                        COMP_OUTPUTDISABLE or COMP_OUTPUTENABLE
  81                               )
  82          {
  83   1        bit currenable;
  84   1      
  85   1          if (compnum == COMP_1)
  86   1          {
  87   2              // initialize port pins according to configuration
  88   2              if (posinput == COMP_INPUTA)
  89   2              {
  90   3                  // select CIN1A as analog input
  91   3                  P0M1 |= 0x10;
  92   3                  P0M2 &= ~0x10;
  93   3                  PT0AD |= 0x10;
  94   3              }
  95   2              else
  96   2              {
  97   3                  // select CIN1B as analog input
  98   3                  P0M1 |= 0x08;
  99   3                  P0M2 &= ~0x08;
 100   3                  PT0AD |= 0x08;
 101   3              }
 102   2              
 103   2              if (neginput == COMP_INPUTREF)
 104   2              {
 105   3                  // select CMPREF as analog input
 106   3                  P0M1 |= 0x20;
 107   3                  P0M2 &= ~0x20;
 108   3                  PT0AD |= 0x20;
 109   3              }
 110   2          
 111   2              if (outputenable == COMP_OUTPUTENABLE)
 112   2              {
 113   3                  // select CMP1 as push-pull output
 114   3                  P0M1 &= ~0x40;
 115   3                  P0M2 |= 0x40;
 116   3              }
C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 3   

 117   2          
 118   2              // find out if comparator is currently enabled or not
 119   2              currenable = CMP1 & 0x20;
 120   2      
 121   2              // configure and enable comparator
 122   2              // clear interrupt flag
 123   2              CMP1 = posinput | neginput | outputenable | 0x20;
 124   2      
 125   2              // if comparator just enabled then we need to call a function
 126   2              // so the user can generate a 13us delay
 127   2              if (!currenable) comparators_13usdelay();
 128   2      
 129   2              // clear comparator interrupt flag to avoid spurious interrupt
 130   2              CMP1 &= ~0x01;
 131   2          }
 132   1          else
 133   1          {
 134   2              // initialize port pins according to configuration
 135   2              if (posinput == COMP_INPUTA)
 136   2              {
 137   3                  // select CIN2A as analog input
 138   3                  P0M1 |= 0x04;
 139   3                  P0M2 &= ~0x04;
 140   3                  PT0AD |= 0x04;
 141   3              }
 142   2              else
 143   2              {
 144   3                  // select CIN2B as analog input
 145   3                  P0M1 |= 0x02;
 146   3                  P0M2 &= ~0x02;
 147   3                  PT0AD |= 0x02;
 148   3              }
 149   2      
 150   2              if (neginput == COMP_INPUTREF)
 151   2              {
 152   3                  // select CMPREF as analog input
 153   3                  P0M1 |= 0x20;
 154   3                  P0M2 &= ~0x20;
 155   3                  PT0AD |= 0x20;
 156   3              }
 157   2      
 158   2              if (outputenable == COMP_OUTPUTENABLE)
 159   2              {
 160   3                  // select CMP2 as push-pull output
 161   3                  P0M1 &= ~0x01;
 162   3                  P0M2 |= 0x01;
 163   3              }
 164   2      
 165   2              // find out if comparator is currently enabled or not
 166   2              currenable = CMP2 & 0x20;
 167   2      
 168   2              // configure and enable comparator
 169   2              // clear interrupt flag
 170   2              CMP2 = posinput | neginput | outputenable | 0x20;
 171   2      
 172   2              // if comparator just enabled then we need to call a function
 173   2              // so the user can generate a 13us delay
 174   2              if (!currenable) comparators_13usdelay();
 175   2      
 176   2              // clear comparator interrupt flag to avoid a spurious interrupt
 177   2              CMP2 &= ~0x01;
 178   2          }
C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 4   

 179   1      
 180   1          // set isr priority to 0
 181   1          IP1 &= 0xFB;
 182   1          IP1H &= 0xFB;
 183   1      
 184   1          // enable comparator interrupt
 185   1          EC = 1;
 186   1      }
 187          
 188          /***********************************************************************
 189          DESC:    Comparator Interrupt Service Routine
 190                   Uses register bank 1
 191          RETURNS: Nothing
 192          CAUTION: comparators_init must be called and EA set to 1 to enable
 193                   interrupts.
 194                   Called when the output of any enabled comparator changes
 195          ************************************************************************/
 196          void comparators_isr(void) interrupt 8 using 1
 197          {
 198   1          // check if comparator 1 caused interrupt
 199   1          if (CMP1 & 0x01)
 200   1          {
 201   2              // clear interrupt flag
 202   2              CMP1 &= ~0x01;
 203   2          }
 204   1          
 205   1          // check if comparator 2 caused interrupt
 206   1          if (CMP2 & 0x01)
 207   1          {
 208   2              // clear interrupt flag
 209   2              CMP2 &= ~0x01;
 210   2          }
 211   1      }
 212          
 213          /***********************************************************************
 214          DESC:    Disables a comparator
 215          RETURNS: Nothing
 216          CAUTION: The port pins used by the comparator are not reconfigured to
 217                   be digital inputs or outputs.
 218          ************************************************************************/
 219          /*
 220          void comparators_disable(bit compnum                     // comparator number:     COMP_1 or COMP_2
 221                                  )
 222          {
 223              // disable comparator 1
 224              if (compnum == COMP_1)
 225              {
 226                  CMP1 &= ~0x20;
 227              }
 228              // disable comparator 2
 229              else
 230              {
 231                  CMP2 &= ~0x20;
 232              }
 233          }
 234          */
 235          
 236          /***********************************************************************
 237          DESC:    Gets the current output of a comparator
 238          RETURNS: Current comparator output
 239          CAUTION: comparators_init must be called first
 240          ************************************************************************/
C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 5   

 241          bit comparators_getoutput(bit compnum                     // comparator number:     COMP_1 or COMP_2
 242                                   )
 243          {
 244   1          // get output of comparator 1
 245   1          if (compnum == COMP_1)
 246   1          {
 247   2              return (CMP1 >> 1) & 0x01;
 248   2          }
 249   1          // get output of comparator 2
 250   1          else
 251   1          {
 252   2              return (CMP2 >> 1) & 0x01;
 253   2          }
 254   1      }
 255          
 256          
 257          /***********************************************************************
 258          DESC:    Follows the current output of a comparator
 259          RETURNS: if any from comparators changed, generate event
 260          CAUTION: comparators_init must be called first
 261          ************************************************************************/
 262          void comparator_proc()
 263          {
 264   1          bit cmp1_state;
 265   1          bit cmp2_state;
 266   1          
 267   1          cmp1_state = ((CMP1 >> 1) & 0x01);
 268   1          if(cmp1_state != cmp1_temp)
 269   1          {
 270   2              cmp1_temp = cmp1_state;
 271   2              event_send(EVENT_CMP1_STATE_CHANGE);
 272   2          }
 273   1              
 274   1          cmp2_state = ((CMP2 >> 1) & 0x01);
 275   1          if(cmp2_state != cmp2_temp)
 276   1          {
 277   2              cmp2_temp = cmp2_state;
 278   2              event_send(EVENT_CMP1_STATE_CHANGE);
 279   2          }
 280   1      }
 281          
 282          /***********************************************************************
 283          DESC:    Selects a positive input source for a comparator
 284          RETURNS: Nothing
 285          CAUTION: comparators_init must be called first.
 286                   The comparator interrupt is disabled while the input is
 287                   changed. This means that the other comparator not being changed
 288                   will also not generate an interrupt.
 289          ************************************************************************/
 290          /*
 291          void comparators_selectposinput(bit compnum,                    // comparator number:     COMP_1 or COMP_2
 292                                          unsigned char posinput          // positive input A or B: COMP_INPUTA or C
             -OMP_INPUTB
 293                                         )
 294          {
 295              // disable comparator interrupt
 296              EC = 0;
 297          
 298              // configure comparator 1
 299              if (compnum == COMP_1)
 300              {
 301                  // initialize port pins according to configuration
C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 6   

 302                  if (posinput == COMP_INPUTA)
 303                  {
 304                      // select CIN1A as analog input
 305                      P0M1 |= 0x10;
 306                      P0M2 &= ~0x10;
 307                      PT0AD |= 0x10;
 308                  }
 309                  else
 310                  {
 311                      // select CIN1B as analog input
 312                      P0M1 |= 0x08;
 313                      P0M2 &= ~0x08;
 314                      PT0AD |= 0x08;
 315                  }
 316          
 317                  // clear input selection
 318                  CMP1 &= ~0x10;
 319          
 320                  // select new input
 321                  CMP1 |= posinput;
 322              }
 323              // configure comparator 2
 324              else
 325              {
 326                  // initialize port pins according to configuration
 327                  if (posinput == COMP_INPUTA)
 328                  {
 329                      // select CIN2A as analog input
 330                      P0M1 |= 0x04;
 331                      P0M2 &= ~0x04;
 332                      PT0AD |= 0x04;
 333                  }
 334                  else
 335                  {
 336                      // select CIN2B as analog input
 337                      P0M1 |= 0x02;
 338                      P0M2 &= ~0x02;
 339                      PT0AD |= 0x02;
 340                  }
 341              
 342                  // clear input selection
 343                  CMP2 &= ~0x10;
 344                  
 345                  // select new input
 346                  CMP2 |= posinput;
 347              }
 348          
 349              // enable comparator interrupt
 350              EC = 1;
 351          }
 352          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    277    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       5
   EDATA SIZE       =   ----    ----
C51 COMPILER V8.05a   COMPARATOR                                                           11/16/2007 01:49:02 PAGE 7   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
