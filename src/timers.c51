
/***********************************************************************
MODULE:    Timers
VERSION:   1.00
CONTAINS:  Routines for controlling the timers on the Philips
           P89LPC922
COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
LICENSE:   May be freely used in commercial and non-commercial code
           without royalties provided this copyright notice remains
           in this file and unaltered
WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
           MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
           TO CHANGE THE CONTENTS OF THIS FILE
GENERATED: On "Nov 09 2007" at "18:15:33" by Code Architect 2.11
***********************************************************************/

// SFR description needs to be included
#include <reg922.h>
#include "timers.h"

int idata timer[TIMERS_COUNT];

/***********************************************************************
DESC:    Initializes timers
         Timer 0 generates an interrupt every 10ms
         Timer 1 is not used
RETURNS: Nothing
CAUTION: If interrupts are being used then EA must be set to 1
         after calling this function
************************************************************************/
void timers_init(void)
{
  // configure timer 0
  TMOD &= 0xF0;
  TMOD |= 0x01;
  TAMOD &= 0xFE;

  // timer values for 10ms
  //TH0 = 0x70;
  //TL0 = 0x00;

  // timer values for 1ms
  TH0 = 0x71;
  TL0 = 0x99;

  // set timer 0 isr priority to 3
  IP0  &= 0xFD;
  IP0H &= 0xFD;
  IP0  |= 0x02;
  IP0H |= 0x02;

  // enable timer 0 interrupt
  ET0 = 1;

  // start timer 0
  TR0 = 1;

} // timers_init


/***********************************************************************
DESC:    Timer 0 Interrupt Service Routine
RETURNS: Nothing
CAUTION: timers_init must be called first
         EA must be set to 1
************************************************************************/
void timers_isr0(void) interrupt 1 using 3
{
    char timer_id;

    // reinitialize (for 1ms)
    TH0 = 0x71;
    TL0 = 0x99;

    // timers decrement
    for(timer_id=0; timer_id<TIMERS_COUNT; timer_id++)
    {
        if(timer[timer_id])
            timer[timer_id]--;
    }
} // timers_isr0

